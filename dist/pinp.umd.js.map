{"version":3,"file":"pinp.umd.js","sources":["../src/utils/class-autobind.js","../src/abstractions/Cluster.js","../src/abstractions/Box.js","../src/utils/noop.js","../src/index.js","../src/utils/object-is-dom-element.js"],"sourcesContent":["export default (instance, proto) => {\n  if (proto == null) proto = Object.getPrototypeOf(instance)\n\n  const propertyNames = Object.getOwnPropertyNames(proto)\n  for (let name of propertyNames) {\n    const value = proto[name]\n    if (typeof value === 'function') instance[name] = proto[name].bind(instance)\n  }\n}\n","import autobind from '../utils/class-autobind'\n\nexport default class Cluster {\n  constructor (boxes, {\n    noOOB = true,\n    debug = false,\n    maxSolverIterations = 999\n  } = {}) {\n    this.boxes = boxes\n\n    this.noOOB = noOOB\n    this.debug = debug\n    this.maxSolverIterations = maxSolverIterations\n\n    this.update()\n    autobind(this)\n  }\n\n  freeze () {\n    if (this.frozen) return\n    this.frozen = true\n    this.boxes.forEach(box => {\n      box.freeze()\n      if (this.debug) box.element.classList.add('frozen')\n    })\n  }\n\n  unfreeze () {\n    if (!this.frozen) return\n    this.frozen = false\n    this.boxes.forEach(box => {\n      box.unfreeze()\n      if (this.debug) box.element.classList.remove('frozen')\n    })\n  }\n\n  update () {\n    if (this.frozen) return\n    this._updateBoundingBox()\n    if (this.noOOB) this.ensureInBounds()\n  }\n\n  _updateBoundingBox () {\n    const bb = Cluster.computeBoundingBox(this.boxes)\n    Object.entries(bb).forEach(([key, value]) => {\n      this[key] = value\n    })\n  }\n\n  static computeBoundingBox (boxes) {\n    let x = 0\n    let y = 0\n    let width = 0\n    let height = 0\n\n    boxes.forEach(box => {\n      if (!box.boundingBox) box.update()\n\n      x = Math.min(x, box.xmin)\n      y = Math.min(y, box.ymin)\n      width = Math.max(width, box.xmax)\n      height = Math.max(height, box.ymax)\n    })\n\n    return {\n      x,\n      y,\n      width,\n      height,\n      xmin: x,\n      xmax: x + width,\n      ymin: y,\n      ymax: y + height\n    }\n  }\n\n  // TODO: for now, only top and left boundaries are taken in account\n  ensureInBounds () {\n    const dx = -Math.min(0, this.xmin)\n    const dy = -Math.min(0, this.ymin)\n\n    if (!dx && !dy) return\n    this.boxes.forEach(box => box.move(box.x + dx, box.y + dy))\n    this._updateBoundingBox()\n  }\n\n  pack ({\n    maxSolverIterations = this.maxSolverIterations,\n    debug = this.debug\n  } = {}) {\n    // Sort all boxes from most recent moved to oldest move\n    this.boxes = this.boxes.sort((a, b) => b.lastMove - a.lastMove)\n\n    this.boxes.forEach((box, index) => {\n      // As we want to preserve the frozen state upon packing,\n      // we ensure that the box will stay where it has been frozen\n      if (box.frozen) box.move(box.frozenBoundingBox.x, box.frozenBoundingBox.y)\n      else box.update()\n\n      if (debug) {\n        box.packingOrder = index\n        box.element.setAttribute('data-packing-order', index)\n      }\n    })\n\n    let _itercount = 0\n    let woke = this.boxes.filter(box => this.boxes.some(box.collide))\n    while (woke.length && ++_itercount < maxSolverIterations) {\n      const current = woke.shift()\n      const colliding = this.boxes.filter(current.collide)\n      if (!colliding || !colliding.length) continue\n\n      colliding.forEach(box => {\n        const delta = current.delta(box)\n        const horizontal = Math.abs(delta[0]) >= Math.abs(delta[1])\n\n        if (debug) {\n          console.log({\n            current: current.packingOrder,\n            collide: box.packingOrder,\n            delta,\n            direction: horizontal ? 'horizontal' : 'vertical'\n          })\n        }\n\n        if (horizontal && delta[0] <= 0) box.move(current.xmax, box.y)\n        if (horizontal && delta[0] > 0) box.move(current.xmin - box.width, box.y)\n        if (!horizontal && delta[1] <= 0) box.move(box.x, current.ymax)\n        if (!horizontal && delta[1] > 0) box.move(box.x, current.ymin - box.height)\n        woke.push(box)\n      })\n    }\n\n    this.update()\n  }\n}\n","import Draggabilly from 'draggabilly'\nimport autobind from '../utils/class-autobind'\n\nexport default class Box {\n  constructor (element, {\n    container = document.documentElement,\n    grid = [1, 1]\n  } = {}) {\n    if (!element) {\n      throw new TypeError(`Box constructor expects HTMLElement, ${typeof element} given`)\n    }\n\n    this.grid = grid\n\n    this.element = element\n    this.element.style.position = 'absolute'\n    this.container = container\n\n    this.lastMove = Date.now()\n\n    this.dragInstance = new Draggabilly(element, { grid, containment: container })\n    this.dragInstance.on('dragStart', () => { this.isDragging = true })\n    this.dragInstance.on('dragMove', () => { this.lastMove = Date.now() })\n    this.dragInstance.on('dragEnd', () => { this.isDragging = false })\n\n    autobind(this)\n  }\n\n  destroy () {\n    this.dragInstance.destroy()\n  }\n\n  collide (box) {\n    return this.collideOnXAxis(box) && this.collideOnYAxis(box)\n  }\n\n  delta (box) {\n    return [\n      this.center.x - box.center.x,\n      this.center.y - box.center.y\n    ]\n  }\n\n  freeze () {\n    if (this.frozen) return\n    this.frozen = true\n    this.frozenBoundingBox = this._computeBoundingBox()\n  }\n\n  unfreeze () { this.frozen = false }\n\n  collideOnYAxis (box) {\n    if (!box) return\n    if (box === this) return false\n\n    return this.xmax > box.xmin && this.xmin < box.xmax\n  }\n\n  collideOnXAxis (box) {\n    if (!box) return\n    if (box === this) return false\n\n    return this.ymax > box.ymin && this.ymin < box.ymax\n  }\n\n  move (x, y) {\n    if (this.isDragging) return\n\n    this.dragInstance.setPosition(x, y)\n    this.lastMove = Date.now()\n    this.update()\n  }\n\n  update () {\n    this.boundingBox = this._computeBoundingBox()\n\n    // NOTE: in addition to Box.boundingBox, all boundingBox keys are accessible directly via Box[key]\n    Object.keys(this.boundingBox).forEach(key => {\n      this[key] = this.boundingBox[key]\n    })\n  }\n\n  // WARNING: due to Element.getBoundingClientRect causing layout repaint,\n  // Box.boundingBox is memoized and only recomputed on Box.update call\n  _computeBoundingBox () {\n    const { width, height } = this.element.getBoundingClientRect()\n    const x = this.dragInstance.position.x\n    const y = this.dragInstance.position.y\n    return Object.freeze({\n      x,\n      y,\n      width,\n      height,\n      xmin: x,\n      ymin: y,\n      xmax: x + width,\n      ymax: y + height,\n      center: {\n        x: x + width / 2,\n        y: y + height / 2\n      }\n    })\n  }\n}\n","export default function () {}\n","import Cluster from './abstractions/Cluster'\nimport isDomElement from './utils/object-is-dom-element'\nimport Box from './abstractions/Box'\nimport noop from './utils/noop'\n\nexport default ({\n  boxSelector = '.pinp-box',\n  container = '.pinp-container',\n  debug = false,\n  grid = [50, 50],\n  maxSolverIterations = 999,\n  noOOB = true,\n  updateContainerWidth = true,\n  updateContainerHeight = true,\n  willUpdate = noop,\n  didUpdate = noop\n} = {}) => {\n  container = isDomElement(container)\n    ? container\n    : document.querySelector(container)\n\n  const cluster = new Cluster([], { debug, maxSolverIterations, noOOB })\n\n  const boxElements = container.querySelectorAll(boxSelector)\n  for (let i = 0; i < boxElements.length; i++) {\n    add(boxElements[i])\n  }\n\n  const api = {\n    add,\n    update,\n    get boxes () { return cluster.boxes },\n    get width () { return cluster.xmax },\n    get height () { return cluster.ymax }\n  }\n\n  return api\n\n  function add (el) {\n    const box = new Box(el, {\n      container,\n      onMove: update,\n      grid\n    })\n\n    box.dragInstance.on('dragStart', () => {\n      cluster.freeze()\n      window.requestAnimationFrame(cluster.pack)\n    })\n\n    box.dragInstance.on('dragMove', () => {\n      willUpdate()\n      box.unfreeze()\n      // NOTE: forcing debug to `false` to avoid flooding the console\n      window.requestAnimationFrame(() => cluster.pack({ debug: false }))\n      didUpdate()\n    })\n\n    box.dragInstance.on('dragEnd', () => {\n      cluster.unfreeze()\n      update()\n    })\n\n    cluster.boxes.push(box)\n  }\n\n  function update () {\n    window.requestAnimationFrame(() => {\n      willUpdate()\n      cluster.pack()\n\n      if (updateContainerWidth) container.style.width = cluster.xmax + 'px'\n      if (updateContainerHeight) container.style.height = cluster.ymax + 'px'\n      didUpdate()\n    })\n  }\n}\n","export default o => (typeof window.HTMLElement === 'object')\n  ? o instanceof window.HTMLElement\n  : o && typeof o === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string'\n"],"names":["instance","proto","Object","getPrototypeOf","getOwnPropertyNames","let","name","bind","Cluster","constructor","boxes","ref","noOOB","debug","maxSolverIterations","update","autobind","this","freeze","frozen","forEach","box","element","classList","add","unfreeze","remove","_updateBoundingBox","ensureInBounds","bb","computeBoundingBox","entries","x","y","width","height","boundingBox","Math","min","xmin","ymin","max","xmax","ymax","dx","dy","move","pack","sort","a","b","lastMove","index","frozenBoundingBox","packingOrder","setAttribute","_itercount","woke","filter","some","collide","current","shift","colliding","length","delta","horizontal","abs","log","direction","push","Box","document","documentElement","TypeError","grid","style","position","container","Date","now","dragInstance","Draggabilly","on","isDragging","destroy","collideOnXAxis","collideOnYAxis","center","_computeBoundingBox","setPosition","keys","key","getBoundingClientRect","noop","o","window","HTMLElement","nodeType","nodeName","querySelector","cluster","boxElements","querySelectorAll","boxSelector","i","el","onMove","requestAnimationFrame","willUpdate","didUpdate","updateContainerWidth","updateContainerHeight"],"mappings":"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"}