{"version":3,"file":"pinp.umd.js","sources":["../src/abstractions/Cluster.js","../src/utils/noop.js","../src/abstractions/Box.js","../src/utils/class-autobind.js","../src/index.js","../src/utils/object-is-dom-element.js"],"sourcesContent":["export default class Cluster {\n  constructor (boxes, {\n    noOOB = true\n  } = {}) {\n    this.boxes = boxes\n    this.noOOB = noOOB\n    this.update()\n  }\n\n  update () {\n    this._updateBoundingBox()\n    if (this.noOOB) this.ensureInBounds()\n  }\n\n  _updateBoundingBox () {\n    const bb = Cluster.computeBoundingBox(this.boxes)\n    Object.entries(bb).forEach(([key, value]) => {\n      this[key] = value\n    })\n  }\n\n  static computeBoundingBox (boxes) {\n    let x = 0\n    let y = 0\n    let width = 0\n    let height = 0\n\n    boxes.forEach(box => {\n      if (!box.boundingBox) box.update()\n\n      x = Math.min(x, box.xmin)\n      y = Math.min(y, box.ymin)\n      width = Math.max(width, box.xmax)\n      height = Math.max(height, box.ymax)\n    })\n\n    return {\n      x,\n      y,\n      width,\n      height,\n      xmin: x,\n      xmax: x + width,\n      ymin: y,\n      ymax: y + height\n    }\n  }\n\n  // TODO: for now, only top and left boundaries are taken in account\n  ensureInBounds () {\n    const dx = -Math.min(0, this.xmin)\n    const dy = -Math.min(0, this.ymin)\n\n    if (!dx && !dy) return\n    this.boxes.forEach(box => box.move(box.x + dx, box.y + dy))\n    this._updateBoundingBox()\n  }\n\n  pack ({ maxSolverIterations = 999 } = {}) {\n    let woke = this.boxes.filter(box => this.boxes.some(box.collide))\n\n    let _itercount = 0\n    while (woke.length && ++_itercount < maxSolverIterations) {\n      const current = woke.shift()\n      const colliding = this.boxes.filter(current.collide)\n      if (!colliding || !colliding.length) continue\n\n      colliding.forEach(box => {\n        const delta = current.delta(box)\n        const horizontal = Math.abs(delta[0]) >= Math.abs(delta[1])\n\n        console.log(current.ID, box.ID, delta, horizontal)\n\n        if (horizontal && delta[0] <= 0) box.move(current.xmax, box.y)\n        if (horizontal && delta[0] > 0) box.move(current.xmin - box.width, box.y)\n        if (!horizontal && delta[1] <= 0) box.move(box.x, current.ymax)\n        if (!horizontal && delta[1] > 0) box.move(box.x, current.ymin - box.height)\n        woke.push(box)\n      })\n    }\n\n    this.update()\n  }\n}\n","export default function () {}\n","import Draggabilly from 'draggabilly'\nimport noop from '../utils/noop'\nimport autobind from '../utils/class-autobind'\n\nexport default class Box {\n  constructor (element, {\n    container = document.documentElement,\n    grid = [1, 1],\n    onMove = noop\n  } = {}) {\n    if (!element) {\n      throw new TypeError(`Box constructor expects HTMLElement, ${typeof element} given`)\n    }\n\n    this.grid = grid\n    this.onMove = onMove\n\n    this.element = element\n    this.element.style.position = 'absolute'\n    this.container = container\n\n    this.lastMove = Date.now()\n\n    this.dragInstance = new Draggabilly(element, { grid, containment: container })\n    this.dragInstance.on('dragMove', () => { this.lastMove = Date.now() })\n    this.dragInstance.on('dragEnd', this.onMove)\n\n    autobind(this)\n  }\n\n  destroy () {\n    this.dragInstance.destroy()\n  }\n\n  collide (box) {\n    return this.collideOnXAxis(box) && this.collideOnYAxis(box)\n  }\n\n  delta (box) {\n    return [\n      this.center.x - box.center.x,\n      this.center.y - box.center.y\n    ]\n  }\n\n  collideOnYAxis (box) {\n    if (!box) return\n    if (box === this) return false\n\n    return this.xmax > box.xmin && this.xmin < box.xmax\n  }\n\n  collideOnXAxis (box) {\n    if (!box) return\n    if (box === this) return false\n\n    return this.ymax > box.ymin && this.ymin < box.ymax\n  }\n\n  move (x, y) {\n    if (this.isDragged) return\n    this.dragInstance.setPosition(x, y)\n    this.lastMove = Date.now()\n    this.update()\n  }\n\n  update () {\n    this.boundingBox = this._computeBoundingBox()\n    // NOTE: in addition to Box.boundingBox,\n    // all boundingBox keys are accessible directly via Box[key]\n    Object.entries(this.boundingBox).forEach(([key, value]) => { this[key] = value })\n  }\n\n  // WARNING: due to Element.getBoundingClientRect causing layout repaint,\n  // Box.boundingBox is memoized and only recomputed on Box.update call\n  _computeBoundingBox () {\n    const { width, height } = this.element.getBoundingClientRect()\n    const x = this.dragInstance.position.x\n    const y = this.dragInstance.position.y\n    return {\n      x,\n      y,\n      width,\n      height,\n      xmin: x,\n      ymin: y,\n      xmax: x + width,\n      ymax: y + height,\n      center: {\n        x: x + width / 2,\n        y: y + height / 2\n      }\n    }\n  }\n\n  // DEBUG\n  write (text, append = false) {\n    this._text = append\n      ? this._text + ' ' + text\n      : text\n    this.element.innerHTML = this._text\n  }\n}\n","export default (instance, proto) => {\n  if (proto == null) proto = Object.getPrototypeOf(instance)\n\n  const propertyNames = Object.getOwnPropertyNames(proto)\n  for (let name of propertyNames) {\n    const value = proto[name]\n    if (typeof value === 'function') instance[name] = proto[name].bind(instance)\n  }\n}\n","import Cluster from './abstractions/Cluster'\nimport isDomElement from './utils/object-is-dom-element'\nimport Box from './abstractions/Box'\n\nexport default ({\n  boxSelector = '.pinp-box',\n  container = '.pinp-container',\n  grid = [50, 50],\n  updateContainerWidth = true\n} = {}) => {\n  container = isDomElement(container)\n    ? container\n    : document.querySelector(container)\n\n  const boxes = []\n  const boxElements = container.querySelectorAll(boxSelector)\n  for (let i = 0; i < boxElements.length; i++) add(boxElements[i])\n\n  const api = {\n    add,\n    update\n  }\n\n  return api\n\n  function add (el) {\n    const box = new Box(el, {\n      container,\n      onMove: update,\n      grid\n    })\n\n    boxes.push(box)\n  }\n\n  function update () {\n    window.requestAnimationFrame(() => {\n      boxes\n        .sort((a, b) => b.lastMove - a.lastMove)\n        .forEach((box, index) => {\n          box.ID = index\n          box.write('#' + box.ID)\n          box.update()\n        })\n\n      // boxes.forEach(box => box.update())\n\n      const cluster = new Cluster(boxes)\n      cluster.pack()\n\n      if (updateContainerWidth) {\n        container.style.width = cluster.width + 'px'\n      }\n    })\n  }\n}\n","export default o => (typeof window.HTMLElement === 'object')\n  ? o instanceof window.HTMLElement\n  : o && typeof o === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string'\n"],"names":["Cluster","constructor","boxes","ref","noOOB","update","_updateBoundingBox","this","ensureInBounds","bb","computeBoundingBox","Object","entries","forEach","x","y","width","height","box","boundingBox","Math","min","xmin","ymin","max","xmax","ymax","dx","dy","move","pack","woke","filter","some","collide","_itercount","current","shift","colliding","length","delta","horizontal","abs","console","log","ID","push","maxSolverIterations","Box","element","document","documentElement","noop","TypeError","grid","onMove","style","position","container","lastMove","Date","now","dragInstance","Draggabilly","on","instance","proto","getPrototypeOf","getOwnPropertyNames","let","name","bind","autobind","destroy","collideOnXAxis","collideOnYAxis","center","isDragged","setPosition","_computeBoundingBox","getBoundingClientRect","write","text","append","_text","innerHTML","o","window","HTMLElement","nodeType","nodeName","querySelector","boxElements","querySelectorAll","boxSelector","i","add","el","requestAnimationFrame","sort","a","b","index","cluster","updateContainerWidth"],"mappings":"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"}